<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>井字遊戲</title>
    <style type="text/css">
        .board {
            width: 300px;
            height: 300px;
            margin: 50px auto;
            border: 5px solid #000000;
            border-radius: 10px;
            position: relative;
        }

        .board > .cell {
            box-sizing: border-box;
            width: 100px;
            height: 100px;
            line-height: 100px;
            font-size: 50px;
            text-align: center;
            border: 1px solid #000000;
            cursor: pointer;
            display: inline-block;
            vertical-align: middle;
        }

        .board > .line {
            position: absolute;
            top: 0;
            left: 0;
            width: 300px;
            height: 300px;
        }
    </style>
</head>
<body>
<div id="app"></div>
<script crossorigin src="https://unpkg.com/react@16/umd/react.development.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>
<script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
<script type="text/babel">
  // 贏家的線條呈現
  class Line extends React.Component {
    render() {
      // 根據贏家的資訊：startIndex 和 endIndex. 把線條用 svg 標籤畫在畫面上
      let startX = this.props.startIndex % 3;
      let startY = Math.floor(this.props.startIndex / 3);
      let endX = this.props.endIndex % 3;
      let endY = Math.floor(this.props.endIndex / 3);
      return <svg className="line">
          <line x1={startX * 100 + 50} y1={startY * 100 + 50} x2={endX * 100 + 50} y2={endY * 100 + 50} stroke="red"
                strokeWidth="5"/>
      </svg>;
    }
  }

  // 框框組件
  class Cell extends React.Component {
    render() {
      let text = '';
      if (this.props.mark === 0) {
        text = 'O';
      } else if (this.props.mark === 1) {
        text = 'X';
      }
      return <div className="cell" onClick={this.click}>{text}</div>
    }

    click = () => {
      this.props.update(this.props.index);
    };
  }

  // 遊戲盤組件
  class Board extends React.Component {
    constructor() {
      super(...arguments);
      /*
      框框在 marks 中的編號 (index)
      0 1 2
      3 4 5
      6 7 8
       */
      this.state = {
        circle: 0, // 回合數
        marks: [-1, -1, -1, -1, -1, -1, -1, -1, -1], // 框框標記：-1 無, 0 圈, 1 叉
        winner: null, // 贏家的資訊, null 代表沒有
      };
    }

    render() {
      let cells = [];
      for (let i = 0; i < this.state.marks.length; i++) {
        cells.push(
                <Cell key={i} index={i}
                      mark={this.state.marks[i]}
                      update={this.updateMark}/>);
      }
      if (this.state.winner !== null) {
        cells.push(<Line key={cells.length}
                         startIndex={this.state.winner.startIndex}
                         endIndex={this.state.winner.endIndex}/>);
      }
      return <div className="board">{cells}</div>
    }

    /**
     * 用來更新框框的標記
     * @param index
     */
    updateMark = (index) => {
      let currentMark = this.state.marks[index];
      if (currentMark === -1 && this.state.winner === null) {
        this.setState((preState) => {
          preState.marks[index] = this.state.circle % 2;
          let winner = this.checkWinner(preState.marks);
          return {
            circle: preState.circle + 1,
            marks: preState.marks,
            winner
          };
        });
      }
    };

    checkWinner = (marks) => {
      /*
      若有贏家，回傳
      {side: 贏家是圈或叉, startIndex: 線條起點框框編號, endIndex: 線條終點框框編號}
       */
      /*
      框框在 marks 中的編號 (index)
      0 1 2
      3 4 5
      6 7 8
       */
      // 偵測水平方向的三條線是否有相同的標記
      for (let y = 0; y < 3; y++) {
        if (marks[y * 3] !== -1 && marks[y * 3] === marks[y * 3 + 1] && marks[y * 3 + 1] === marks[y * 3 + 2]) {
          return {side: marks[y * 3], startIndex: y * 3, endIndex: y * 3 + 2};
        }
      }
      // 偵測垂直方向的三條線是否有相同的標記
      for (let x = 0; x < 3; x++) {
        if (marks[x] !== -1 && marks[x] === marks[3 + x] && marks[3 + x] === marks[2 * 3 + x]) {
          return {side: marks[x], startIndex: x, endIndex: 2 * 3 + x};
        }
      }
      // 偵測斜線方向的三條線是否有相同的標記
      if (marks[0] !== -1 && marks[0] === marks[4] && marks[4] === marks[8]) {
        return {side: marks[0], startIndex: 0, endIndex: 8};
      } else if (marks[2] !== -1 && marks[2] === marks[4] && marks[4] === marks[6]) {
        return {side: marks[2], startIndex: 2, endIndex: 6};
      }
      // 目前還沒有贏家
      return null;
    };
  }

  ReactDOM.render(<Board/>, document.querySelector('#app'));
</script>
</body>
</html>